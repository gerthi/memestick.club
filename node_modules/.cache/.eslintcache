[{"/home/thib/dev/nerdy_coder_clones_tutorial/example_nft_minter/src/index.js":"1","/home/thib/dev/nerdy_coder_clones_tutorial/example_nft_minter/src/App.js":"2","/home/thib/dev/nerdy_coder_clones_tutorial/example_nft_minter/src/reportWebVitals.js":"3","/home/thib/dev/nerdy_coder_clones_tutorial/example_nft_minter/src/redux/store.js":"4","/home/thib/dev/nerdy_coder_clones_tutorial/example_nft_minter/src/styles/globalStyles.js":"5","/home/thib/dev/nerdy_coder_clones_tutorial/example_nft_minter/src/redux/blockchain/blockchainActions.js":"6","/home/thib/dev/nerdy_coder_clones_tutorial/example_nft_minter/src/redux/data/dataActions.js":"7","/home/thib/dev/nerdy_coder_clones_tutorial/example_nft_minter/src/redux/blockchain/blockchainReducer.js":"8","/home/thib/dev/nerdy_coder_clones_tutorial/example_nft_minter/src/redux/data/dataReducer.js":"9","/home/thib/dev/memesticks.club/src/index.js":"10","/home/thib/dev/memesticks.club/src/reportWebVitals.js":"11","/home/thib/dev/memesticks.club/src/App.js":"12","/home/thib/dev/memesticks.club/src/redux/store.js":"13","/home/thib/dev/memesticks.club/src/styles/globalStyles.js":"14","/home/thib/dev/memesticks.club/src/redux/blockchain/blockchainActions.js":"15","/home/thib/dev/memesticks.club/src/redux/data/dataActions.js":"16","/home/thib/dev/memesticks.club/src/redux/blockchain/blockchainReducer.js":"17","/home/thib/dev/memesticks.club/src/redux/data/dataReducer.js":"18"},{"size":609,"mtime":1632330817863,"results":"19","hashOfConfig":"20"},{"size":8176,"mtime":1632336322263,"results":"21","hashOfConfig":"20"},{"size":362,"mtime":1632330817863,"results":"22","hashOfConfig":"20"},{"size":559,"mtime":1632330817863,"results":"23","hashOfConfig":"20"},{"size":1794,"mtime":1632330817863,"results":"24","hashOfConfig":"20"},{"size":2294,"mtime":1632330817863,"results":"25","hashOfConfig":"20"},{"size":1071,"mtime":1632330817863,"results":"26","hashOfConfig":"20"},{"size":853,"mtime":1632330817863,"results":"27","hashOfConfig":"20"},{"size":826,"mtime":1632330817863,"results":"28","hashOfConfig":"20"},{"size":609,"mtime":1632479509631,"results":"29","hashOfConfig":"30"},{"size":362,"mtime":1632479509641,"results":"31","hashOfConfig":"30"},{"size":15949,"mtime":1632818406696,"results":"32","hashOfConfig":"30"},{"size":559,"mtime":1632479509641,"results":"33","hashOfConfig":"30"},{"size":2296,"mtime":1632501469678,"results":"34","hashOfConfig":"30"},{"size":2367,"mtime":1632585212908,"results":"35","hashOfConfig":"30"},{"size":1518,"mtime":1632567173561,"results":"36","hashOfConfig":"30"},{"size":853,"mtime":1632479509631,"results":"37","hashOfConfig":"30"},{"size":1005,"mtime":1632567192401,"results":"38","hashOfConfig":"30"},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},"1klaywe",{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"41"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},"kg08ly",{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":3,"source":null},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"61"},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},"/home/thib/dev/nerdy_coder_clones_tutorial/example_nft_minter/src/index.js",[],["79","80"],"/home/thib/dev/nerdy_coder_clones_tutorial/example_nft_minter/src/App.js",["81","82","83","84","85","86","87"],"/home/thib/dev/nerdy_coder_clones_tutorial/example_nft_minter/src/reportWebVitals.js",[],"/home/thib/dev/nerdy_coder_clones_tutorial/example_nft_minter/src/redux/store.js",[],"/home/thib/dev/nerdy_coder_clones_tutorial/example_nft_minter/src/styles/globalStyles.js",[],"/home/thib/dev/nerdy_coder_clones_tutorial/example_nft_minter/src/redux/blockchain/blockchainActions.js",["88"],"// constants\nimport Web3EthContract from \"web3-eth-contract\";\nimport Web3 from \"web3\";\nimport SmartContract from \"../../contracts/NCC.json\";\n// log\nimport { fetchData } from \"../data/dataActions\";\n\nconst connectRequest = () => {\n  return {\n    type: \"CONNECTION_REQUEST\",\n  };\n};\n\nconst connectSuccess = (payload) => {\n  return {\n    type: \"CONNECTION_SUCCESS\",\n    payload: payload,\n  };\n};\n\nconst connectFailed = (payload) => {\n  return {\n    type: \"CONNECTION_FAILED\",\n    payload: payload,\n  };\n};\n\nconst updateAccountRequest = (payload) => {\n  return {\n    type: \"UPDATE_ACCOUNT\",\n    payload: payload,\n  };\n};\n\nexport const connect = () => {\n  return async (dispatch) => {\n    dispatch(connectRequest());\n    const { ethereum } = window;\n    const metamaskIsInstalled = ethereum && ethereum.isMetaMask;\n    if (metamaskIsInstalled) {\n      Web3EthContract.setProvider(ethereum);\n      let web3 = new Web3(ethereum);\n      try {\n        const accounts = await ethereum.request({\n          method: \"eth_requestAccounts\",\n        });\n        const networkId = await ethereum.request({\n          method: \"net_version\",\n        });\n        // const NetworkData = await SmartContract.networks[networkId];\n        if (networkId == 137) {\n          const SmartContractObj = new Web3EthContract(\n            SmartContract,\n            \"0x827acb09a2dc20e39c9aad7f7190d9bc53534192\"\n          );\n          dispatch(\n            connectSuccess({\n              account: accounts[0],\n              smartContract: SmartContractObj,\n              web3: web3,\n            })\n          );\n          // Add listeners start\n          ethereum.on(\"accountsChanged\", (accounts) => {\n            dispatch(updateAccount(accounts[0]));\n          });\n          ethereum.on(\"chainChanged\", () => {\n            window.location.reload();\n          });\n          // Add listeners end\n        } else {\n          dispatch(connectFailed(\"Change network to Polygon.\"));\n        }\n      } catch (err) {\n        dispatch(connectFailed(\"Something went wrong.\"));\n      }\n    } else {\n      dispatch(connectFailed(\"Install Metamask.\"));\n    }\n  };\n};\n\nexport const updateAccount = (account) => {\n  return async (dispatch) => {\n    dispatch(updateAccountRequest({ account: account }));\n    dispatch(fetchData(account));\n  };\n};\n","/home/thib/dev/nerdy_coder_clones_tutorial/example_nft_minter/src/redux/data/dataActions.js",[],"/home/thib/dev/nerdy_coder_clones_tutorial/example_nft_minter/src/redux/blockchain/blockchainReducer.js",[],"/home/thib/dev/nerdy_coder_clones_tutorial/example_nft_minter/src/redux/data/dataReducer.js",[],"/home/thib/dev/memesticks.club/src/index.js",[],["89","90"],"/home/thib/dev/memesticks.club/src/reportWebVitals.js",[],"/home/thib/dev/memesticks.club/src/App.js",["91","92","93","94","95","96","97"],"/home/thib/dev/memesticks.club/src/redux/store.js",[],"/home/thib/dev/memesticks.club/src/styles/globalStyles.js",[],"/home/thib/dev/memesticks.club/src/redux/blockchain/blockchainActions.js",["98"],"// constants\nimport Web3EthContract from 'web3-eth-contract';\nimport Web3 from 'web3';\nimport SmartContract from '../../contracts/MMSK.json';\n// log\nimport { fetchData } from '../data/dataActions';\n\nconst connectRequest = () => {\n  return {\n    type: 'CONNECTION_REQUEST',\n  };\n};\n\nconst connectSuccess = (payload) => {\n  return {\n    type: 'CONNECTION_SUCCESS',\n    payload: payload,\n  };\n};\n\nconst connectFailed = (payload) => {\n  return {\n    type: 'CONNECTION_FAILED',\n    payload: payload,\n  };\n};\n\nconst updateAccountRequest = (payload) => {\n  return {\n    type: 'UPDATE_ACCOUNT',\n    payload: payload,\n  };\n};\n\nexport const connect = () => {\n  return async (dispatch) => {\n    dispatch(connectRequest());\n    const { ethereum } = window;\n    const metamaskIsInstalled = ethereum && ethereum.isMetaMask;\n    if (metamaskIsInstalled) {\n      Web3EthContract.setProvider(ethereum);\n      let web3 = new Web3(ethereum);\n      try {\n        const accounts = await ethereum.request({\n          method: 'eth_requestAccounts',\n        });\n        const networkId = await ethereum.request({\n          method: 'net_version',\n        });\n        // console.log('network id is :', networkId);\n        // const NetworkData = await SmartContract.networks[networkId];\n        if (networkId == 1) {\n          const SmartContractObj = new Web3EthContract(\n            SmartContract,\n            '0xc5d71b6f31608a64e123d0ad2f9fb340978bcb23'\n          );\n          dispatch(\n            connectSuccess({\n              account: accounts[0],\n              smartContract: SmartContractObj,\n              web3: web3,\n            })\n          );\n          // Add listeners start\n          ethereum.on('accountsChanged', (accounts) => {\n            dispatch(updateAccount(accounts[0]));\n          });\n          ethereum.on('chainChanged', () => {\n            window.location.reload();\n          });\n          // Add listeners end\n        } else {\n          dispatch(connectFailed('Please connect to the Ethereum network.'));\n        }\n      } catch (err) {\n        dispatch(connectFailed('Something went wrong.'));\n      }\n    } else {\n      dispatch(connectFailed('Please install Metamask.'));\n    }\n  };\n};\n\nexport const updateAccount = (account) => {\n  return async (dispatch) => {\n    dispatch(updateAccountRequest({ account: account }));\n    dispatch(fetchData(account));\n  };\n};\n","/home/thib/dev/memesticks.club/src/redux/data/dataActions.js",[],"/home/thib/dev/memesticks.club/src/redux/blockchain/blockchainReducer.js",[],"/home/thib/dev/memesticks.club/src/redux/data/dataReducer.js",[],{"ruleId":"99","replacedBy":"100"},{"ruleId":"101","replacedBy":"102"},{"ruleId":"103","severity":1,"message":"104","line":1,"column":38,"nodeType":"105","messageId":"106","endLine":1,"endColumn":44},{"ruleId":"107","severity":1,"message":"108","line":95,"column":6,"nodeType":"109","endLine":95,"endColumn":26,"suggestions":"110"},{"ruleId":"111","severity":1,"message":"112","line":123,"column":39,"nodeType":"113","messageId":"114","endLine":123,"endColumn":41},{"ruleId":"115","severity":1,"message":"116","line":131,"column":19,"nodeType":"117","messageId":"118","endLine":134,"endColumn":20,"fix":"119"},{"ruleId":"120","severity":1,"message":"121","line":228,"column":11,"nodeType":"117","endLine":228,"endColumn":23},{"ruleId":"120","severity":1,"message":"121","line":231,"column":11,"nodeType":"117","endLine":231,"endColumn":23},{"ruleId":"120","severity":1,"message":"121","line":232,"column":11,"nodeType":"117","endLine":232,"endColumn":23},{"ruleId":"111","severity":1,"message":"112","line":51,"column":23,"nodeType":"113","messageId":"114","endLine":51,"endColumn":25},{"ruleId":"99","replacedBy":"122"},{"ruleId":"101","replacedBy":"123"},{"ruleId":"111","severity":1,"message":"112","line":77,"column":19,"nodeType":"113","messageId":"114","endLine":77,"endColumn":21},{"ruleId":"111","severity":1,"message":"112","line":89,"column":40,"nodeType":"113","messageId":"114","endLine":89,"endColumn":42},{"ruleId":"107","severity":1,"message":"108","line":145,"column":6,"nodeType":"109","endLine":145,"endColumn":26,"suggestions":"124"},{"ruleId":"115","severity":1,"message":"116","line":163,"column":13,"nodeType":"117","messageId":"118","endLine":166,"endColumn":14,"fix":"125"},{"ruleId":"111","severity":1,"message":"112","line":195,"column":39,"nodeType":"113","messageId":"114","endLine":195,"endColumn":41},{"ruleId":"115","severity":1,"message":"116","line":203,"column":19,"nodeType":"117","messageId":"118","endLine":206,"endColumn":20,"fix":"126"},{"ruleId":"115","severity":1,"message":"116","line":383,"column":13,"nodeType":"117","messageId":"118","endLine":386,"endColumn":14,"fix":"127"},{"ruleId":"111","severity":1,"message":"112","line":52,"column":23,"nodeType":"113","messageId":"114","endLine":52,"endColumn":25},"no-native-reassign",["128"],"no-negated-in-lhs",["129"],"no-unused-vars","'useRef' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getData'. Either include it or remove the dependency array.","ArrayExpression",["130"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement","noTargetBlank",{"range":"131","text":"132"},"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md",["128"],["129"],["133"],{"range":"134","text":"132"},{"range":"135","text":"132"},{"range":"136","text":"132"},"no-global-assign","no-unsafe-negation",{"desc":"137","fix":"138"},[4127,4127]," rel=\"noreferrer\"",{"desc":"137","fix":"139"},[4845,4845],[6159,6159],[12411,12411],"Update the dependencies array to be: [blockchain.account, getData]",{"range":"140","text":"141"},{"range":"142","text":"141"},[2660,2680],"[blockchain.account, getData]",[4168,4188]]