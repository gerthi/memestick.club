{"ast":null,"code":"// constants\nimport Web3EthContract from 'web3-eth-contract';\nimport Web3 from 'web3';\nimport SmartContract from '../../contracts/MMSK.json'; // log\n\nimport { fetchData } from '../data/dataActions';\n\nconst connectRequest = () => {\n  return {\n    type: 'CONNECTION_REQUEST'\n  };\n};\n\nconst connectSuccess = payload => {\n  return {\n    type: 'CONNECTION_SUCCESS',\n    payload: payload\n  };\n};\n\nconst connectFailed = payload => {\n  return {\n    type: 'CONNECTION_FAILED',\n    payload: payload\n  };\n};\n\nconst updateAccountRequest = payload => {\n  return {\n    type: 'UPDATE_ACCOUNT',\n    payload: payload\n  };\n};\n\nexport const connect = () => {\n  return async dispatch => {\n    dispatch(connectRequest());\n    const {\n      ethereum\n    } = window;\n    const metamaskIsInstalled = ethereum && ethereum.isMetaMask;\n\n    if (metamaskIsInstalled) {\n      Web3EthContract.setProvider(ethereum);\n      let web3 = new Web3(ethereum);\n\n      try {\n        const accounts = await ethereum.request({\n          method: 'eth_requestAccounts'\n        });\n        const networkId = await ethereum.request({\n          method: 'net_version'\n        }); // console.log('network id is :', networkId);\n        // const NetworkData = await SmartContract.networks[networkId];\n\n        if (networkId == 1) {\n          const SmartContractObj = new Web3EthContract(SmartContract, '0xc5d71b6f31608a64e123d0ad2f9fb340978bcb23');\n          dispatch(connectSuccess({\n            account: accounts[0],\n            smartContract: SmartContractObj,\n            web3: web3\n          })); // Add listeners start\n\n          ethereum.on('accountsChanged', accounts => {\n            dispatch(updateAccount(accounts[0]));\n          });\n          ethereum.on('chainChanged', () => {\n            window.location.reload();\n          }); // Add listeners end\n        } else {\n          dispatch(connectFailed('Please connect to the Ethereum network.'));\n        }\n      } catch (err) {\n        dispatch(connectFailed('Something went wrong.'));\n      }\n    } else {\n      dispatch(connectFailed('Please install Metamask.'));\n    }\n  };\n};\nexport const updateAccount = account => {\n  return async dispatch => {\n    dispatch(updateAccountRequest({\n      account: account\n    }));\n    dispatch(fetchData(account));\n  };\n};","map":{"version":3,"sources":["/home/thib/dev/memesticks.club/src/redux/blockchain/blockchainActions.js"],"names":["Web3EthContract","Web3","SmartContract","fetchData","connectRequest","type","connectSuccess","payload","connectFailed","updateAccountRequest","connect","dispatch","ethereum","window","metamaskIsInstalled","isMetaMask","setProvider","web3","accounts","request","method","networkId","SmartContractObj","account","smartContract","on","updateAccount","location","reload","err"],"mappings":"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","sourcesContent":["// constants\nimport Web3EthContract from 'web3-eth-contract';\nimport Web3 from 'web3';\nimport SmartContract from '../../contracts/MMSK.json';\n// log\nimport { fetchData } from '../data/dataActions';\n\nconst connectRequest = () => {\n  return {\n    type: 'CONNECTION_REQUEST',\n  };\n};\n\nconst connectSuccess = (payload) => {\n  return {\n    type: 'CONNECTION_SUCCESS',\n    payload: payload,\n  };\n};\n\nconst connectFailed = (payload) => {\n  return {\n    type: 'CONNECTION_FAILED',\n    payload: payload,\n  };\n};\n\nconst updateAccountRequest = (payload) => {\n  return {\n    type: 'UPDATE_ACCOUNT',\n    payload: payload,\n  };\n};\n\nexport const connect = () => {\n  return async (dispatch) => {\n    dispatch(connectRequest());\n    const { ethereum } = window;\n    const metamaskIsInstalled = ethereum && ethereum.isMetaMask;\n    if (metamaskIsInstalled) {\n      Web3EthContract.setProvider(ethereum);\n      let web3 = new Web3(ethereum);\n      try {\n        const accounts = await ethereum.request({\n          method: 'eth_requestAccounts',\n        });\n        const networkId = await ethereum.request({\n          method: 'net_version',\n        });\n        // console.log('network id is :', networkId);\n        // const NetworkData = await SmartContract.networks[networkId];\n        if (networkId == 1) {\n          const SmartContractObj = new Web3EthContract(\n            SmartContract,\n            '0xc5d71b6f31608a64e123d0ad2f9fb340978bcb23'\n          );\n          dispatch(\n            connectSuccess({\n              account: accounts[0],\n              smartContract: SmartContractObj,\n              web3: web3,\n            })\n          );\n          // Add listeners start\n          ethereum.on('accountsChanged', (accounts) => {\n            dispatch(updateAccount(accounts[0]));\n          });\n          ethereum.on('chainChanged', () => {\n            window.location.reload();\n          });\n          // Add listeners end\n        } else {\n          dispatch(connectFailed('Please connect to the Ethereum network.'));\n        }\n      } catch (err) {\n        dispatch(connectFailed('Something went wrong.'));\n      }\n    } else {\n      dispatch(connectFailed('Please install Metamask.'));\n    }\n  };\n};\n\nexport const updateAccount = (account) => {\n  return async (dispatch) => {\n    dispatch(updateAccountRequest({ account: account }));\n    dispatch(fetchData(account));\n  };\n};\n"]},"metadata":{},"sourceType":"module"}