{"ast":null,"code":"// log\nimport store from '../store';\n\nconst fetchDataRequest = () => {\n  return {\n    type: 'CHECK_DATA_REQUEST'\n  };\n};\n\nconst fetchDataSuccess = payload => {\n  return {\n    type: 'CHECK_DATA_SUCCESS',\n    payload: payload\n  };\n};\n\nconst fetchDataFailed = payload => {\n  return {\n    type: 'CHECK_DATA_FAILED',\n    payload: payload\n  };\n};\n\nexport const fetchData = account => {\n  return async dispatch => {\n    dispatch(fetchDataRequest());\n\n    try {\n      let name = await store.getState().blockchain.smartContract.methods.name().call();\n      let totalSupply = await store.getState().blockchain.smartContract.methods.totalSupply().call();\n      let cost = await store.getState().blockchain.smartContract.methods.cost().call();\n      let balance = await store.getState().blockchain.smartContract.methods.balanceOf(account).call();\n      let owner = await store.getState().blockchain.smartContract.methods.owner().call();\n      let isWhitelisted = await store.getState().blockchain.smartContract.methods.isWhitelisted(account).call();\n      dispatch(fetchDataSuccess({\n        name,\n        totalSupply,\n        cost,\n        owner,\n        balance,\n        isWhitelisted\n      }));\n    } catch (err) {\n      console.log(err);\n      dispatch(fetchDataFailed('Could not load data from contract.'));\n    }\n  };\n};","map":{"version":3,"sources":["/home/thib/dev/memesticks.club/src/redux/data/dataActions.js"],"names":["store","fetchDataRequest","type","fetchDataSuccess","payload","fetchDataFailed","fetchData","account","dispatch","name","getState","blockchain","smartContract","methods","call","totalSupply","cost","balance","balanceOf","owner","isWhitelisted","err","console","log"],"mappings":"AAAA;AACA,OAAOA,KAAP,MAAkB,UAAlB;;AAEA,MAAMC,gBAAgB,GAAG,MAAM;AAC7B,SAAO;AACLC,IAAAA,IAAI,EAAE;AADD,GAAP;AAGD,CAJD;;AAMA,MAAMC,gBAAgB,GAAIC,OAAD,IAAa;AACpC,SAAO;AACLF,IAAAA,IAAI,EAAE,oBADD;AAELE,IAAAA,OAAO,EAAEA;AAFJ,GAAP;AAID,CALD;;AAOA,MAAMC,eAAe,GAAID,OAAD,IAAa;AACnC,SAAO;AACLF,IAAAA,IAAI,EAAE,mBADD;AAELE,IAAAA,OAAO,EAAEA;AAFJ,GAAP;AAID,CALD;;AAOA,OAAO,MAAME,SAAS,GAAIC,OAAD,IAAa;AACpC,SAAO,MAAOC,QAAP,IAAoB;AACzBA,IAAAA,QAAQ,CAACP,gBAAgB,EAAjB,CAAR;;AACA,QAAI;AACF,UAAIQ,IAAI,GAAG,MAAMT,KAAK,CACnBU,QADc,GAEdC,UAFc,CAEHC,aAFG,CAEWC,OAFX,CAEmBJ,IAFnB,GAGdK,IAHc,EAAjB;AAIA,UAAIC,WAAW,GAAG,MAAMf,KAAK,CAC1BU,QADqB,GAErBC,UAFqB,CAEVC,aAFU,CAEIC,OAFJ,CAEYE,WAFZ,GAGrBD,IAHqB,EAAxB;AAIA,UAAIE,IAAI,GAAG,MAAMhB,KAAK,CACnBU,QADc,GAEdC,UAFc,CAEHC,aAFG,CAEWC,OAFX,CAEmBG,IAFnB,GAGdF,IAHc,EAAjB;AAIA,UAAIG,OAAO,GAAG,MAAMjB,KAAK,CACtBU,QADiB,GAEjBC,UAFiB,CAENC,aAFM,CAEQC,OAFR,CAEgBK,SAFhB,CAE0BX,OAF1B,EAGjBO,IAHiB,EAApB;AAIA,UAAIK,KAAK,GAAG,MAAMnB,KAAK,CACpBU,QADe,GAEfC,UAFe,CAEJC,aAFI,CAEUC,OAFV,CAEkBM,KAFlB,GAGfL,IAHe,EAAlB;AAIA,UAAIM,aAAa,GAAG,MAAMpB,KAAK,CAC5BU,QADuB,GAEvBC,UAFuB,CAEZC,aAFY,CAEEC,OAFF,CAEUO,aAFV,CAEwBb,OAFxB,EAGvBO,IAHuB,EAA1B;AAIAN,MAAAA,QAAQ,CACNL,gBAAgB,CAAC;AACfM,QAAAA,IADe;AAEfM,QAAAA,WAFe;AAGfC,QAAAA,IAHe;AAIfG,QAAAA,KAJe;AAKfF,QAAAA,OALe;AAMfG,QAAAA;AANe,OAAD,CADV,CAAR;AAUD,KAnCD,CAmCE,OAAOC,GAAP,EAAY;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACAb,MAAAA,QAAQ,CAACH,eAAe,CAAC,oCAAD,CAAhB,CAAR;AACD;AACF,GAzCD;AA0CD,CA3CM","sourcesContent":["// log\nimport store from '../store';\n\nconst fetchDataRequest = () => {\n  return {\n    type: 'CHECK_DATA_REQUEST',\n  };\n};\n\nconst fetchDataSuccess = (payload) => {\n  return {\n    type: 'CHECK_DATA_SUCCESS',\n    payload: payload,\n  };\n};\n\nconst fetchDataFailed = (payload) => {\n  return {\n    type: 'CHECK_DATA_FAILED',\n    payload: payload,\n  };\n};\n\nexport const fetchData = (account) => {\n  return async (dispatch) => {\n    dispatch(fetchDataRequest());\n    try {\n      let name = await store\n        .getState()\n        .blockchain.smartContract.methods.name()\n        .call();\n      let totalSupply = await store\n        .getState()\n        .blockchain.smartContract.methods.totalSupply()\n        .call();\n      let cost = await store\n        .getState()\n        .blockchain.smartContract.methods.cost()\n        .call();\n      let balance = await store\n        .getState()\n        .blockchain.smartContract.methods.balanceOf(account)\n        .call();\n      let owner = await store\n        .getState()\n        .blockchain.smartContract.methods.owner()\n        .call();\n      let isWhitelisted = await store\n        .getState()\n        .blockchain.smartContract.methods.isWhitelisted(account)\n        .call();\n      dispatch(\n        fetchDataSuccess({\n          name,\n          totalSupply,\n          cost,\n          owner,\n          balance,\n          isWhitelisted,\n        })\n      );\n    } catch (err) {\n      console.log(err);\n      dispatch(fetchDataFailed('Could not load data from contract.'));\n    }\n  };\n};\n"]},"metadata":{},"sourceType":"module"}